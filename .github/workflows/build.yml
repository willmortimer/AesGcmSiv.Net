name: Build and Test

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write

env:
  DOTNET_VERSION: '9.0.x'
  OPENSSL_VERSION: '3.2.0'
  OPENSSL_ROOT_DIR: ${{ github.workspace }}/OpenSSL-Win64

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Visual Studio Build Tools
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup OpenSSL from Repository
      run: |
        # Use OpenSSL files already included in the repository
        Write-Host "Using OpenSSL files from repository..."
        if (Test-Path "OpenSSL-Win64") {
          Write-Host "OpenSSL-Win64 directory found in repository"
          
          # Add OpenSSL to PATH for runtime
          $env:PATH = "$PWD\OpenSSL-Win64;$env:PATH"
          
          Write-Host "OpenSSL_ROOT_DIR set to: $env:OPENSSL_ROOT_DIR"
          Write-Host "OpenSSL DLLs available at: $PWD\OpenSSL-Win64"
          Write-Host "PATH includes OpenSSL: $env:PATH"
        } else {
          Write-Error "OpenSSL-Win64 directory not found in repository"
          exit 1
        }
        
    - name: Build Native Library
      run: |
        # Use Developer Command Prompt to build native library
        Write-Host "Building native library with Developer Command Prompt..."
        
        # OpenSSL path set via environment variable
        Write-Host "Using OpenSSL from repository: $env:OPENSSL_ROOT_DIR"
        Write-Host "OpenSSL DLLs should be available in PATH"
        
        # Find Visual Studio installation and vcvars64.bat
        Write-Host "Looking for Visual Studio installations..."
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        Write-Host "Visual Studio found at: $vsPath"
        
        # Try different possible paths for vcvars64.bat
        $vcvarsPaths = @(
          "$vsPath\VC\Auxiliary\Build\vcvars64.bat",
          "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat",
          "C:\Program Files (x86)\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat",
          "C:\Program Files (x86)\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat",
          "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        )
        
        $vcvarsPath = $null
        foreach ($path in $vcvarsPaths) {
          if (Test-Path $path) {
            $vcvarsPath = $path
            Write-Host "Found vcvars64.bat at: $vcvarsPath"
            break
          }
        }
        
        if (-not $vcvarsPath) {
          Write-Error "vcvars64.bat not found in any expected location"
          Write-Host "Available Visual Studio installations:"
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -all -property installationPath
          exit 1
        }
        
        # Run the build script using Developer Command Prompt
        Write-Host "Running build with: $vcvarsPath"
        cmd /c "`"$vcvarsPath`" && cd /d `"$PWD`" && .\Build\build_native.bat"
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Native library build failed"
          exit 1
        }
        
    - name: Build .NET Projects
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
        
    - name: Copy Native DLL and OpenSSL DLLs to Test Directories
      run: |
        # Copy the native DLL and OpenSSL DLLs to the test output directories
        $testDirs = @(
          "AesGcmSiv.Tests\bin\Release\net9.0",
          "AesGcmSiv.Tests\bin\Debug\net9.0"
        )
        
        foreach ($dir in $testDirs) {
          if (Test-Path $dir) {
            # Copy native DLL
            Copy-Item "bin\native\win-x64\aesgcmsiv.dll" $dir -Force
            Write-Host "Copied aesgcmsiv.dll to: $dir"
            
            # Copy OpenSSL DLLs for runtime
            Copy-Item "$env:OPENSSL_ROOT_DIR\libcrypto-3-x64.dll" $dir -Force
            Copy-Item "$env:OPENSSL_ROOT_DIR\libssl-3-x64.dll" $dir -Force
            Write-Host "Copied OpenSSL DLLs to: $dir"
          } else {
            Write-Host "Test directory not found: $dir"
          }
        }
        
    - name: Run Tests
      run: |
        dotnet test --configuration Release --no-build --verbosity normal
        
    - name: Run Static Analysis
      run: |
        # Security scanning
        dotnet list package --vulnerable
        
        # Code quality
        dotnet format --verify-no-changes
        
    - name: Build NuGet Package
      run: |
        dotnet pack --configuration Release --no-build --output ./nupkgs --include-symbols
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          bin/
          nupkgs/
          
  security-scan:
    runs-on: windows-latest
    needs: build-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Security Scan
      run: |
        # Add security scanning tools here
        # Example: dotnet tool install --global dotnet-security-scan
        echo "Security scanning completed"
        
  publish:
    runs-on: windows-latest
    needs: [build-windows, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Publish to NuGet
      run: |
        dotnet nuget push "nupkgs/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json 